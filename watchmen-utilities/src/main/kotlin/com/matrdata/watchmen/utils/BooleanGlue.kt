package com.matrdata.watchmen.utils

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract

/**
 * call given function only when this is true
 */
@OptIn(ExperimentalContracts::class)
inline fun Boolean.doIfTrue(block: Boolean.() -> Unit): Boolean {
	contract {
		callsInPlace(block, InvocationKind.AT_MOST_ONCE)
	}
	if (this) {
		block()
	}
	return this
}

/**
 * throw exception which generated by given function only when this is true
 * which means always returns false when no exception raised.
 */
@OptIn(ExperimentalContracts::class)
inline fun Boolean.throwIfTrue(block: Boolean.() -> Throwable): Boolean {
	contract {
		callsInPlace(block, InvocationKind.AT_MOST_ONCE)
	}
	return if (this) {
		throw block()
	} else {
		false
	}
}

/**
 * call given function only when this is false
 */
@OptIn(ExperimentalContracts::class)
inline fun Boolean.doIfFalse(block: Boolean.() -> Unit): Boolean {
	contract {
		callsInPlace(block, InvocationKind.AT_MOST_ONCE)
	}
	if (!this) {
		block()
	}
	return this
}

/**
 * throw exception which generated by given function only when this is false,
 * which means always returns true when no exception raised.
 */
@OptIn(ExperimentalContracts::class)
inline fun Boolean.throwIfFalse(block: Boolean.() -> Throwable): Boolean {
	contract {
		callsInPlace(block, InvocationKind.AT_MOST_ONCE)
	}
	return if (!this) {
		throw block()
	} else {
		true
	}
}
